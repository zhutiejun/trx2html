[
  {
    "Id": "671341",
    "ThreadId": "272480",
    "Html": "<p><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">I have TRX file which include Ordered Tests. Anyone have solution to convert TRX file in to HTML. </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">If you have solution or if you know any software application which convert TRX file (this file contains <em><span style=\"font-family: 'Segoe UI','sans-serif';\">ordered</span></em> test) to HTML please let us know.</span></span></p>",
    "PostedDate": "2011-09-13T12:49:00.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "812387",
    "ThreadId": "272480",
    "Html": "<p>I have managed to do this by amending the LINQ in the version 85426&nbsp;TrxParser.cs in the method TrxParser.Parse(string filePath) by replacing:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            <span style=\"color: blue;\">string</span> name = doc.Document.Root.Attribute(<span style=\"color: #a31515;\">\"name\"</span>).Value;\r\n            <span style=\"color: blue;\">string</span> runUser = doc.Document.Root.Attribute(<span style=\"color: #a31515;\">\"runUser\"</span>).Value;\r\n            <span style=\"color: blue;\">var</span> unitTests = doc.Descendants(ns + <span style=\"color: #a31515;\">\"UnitTest\"</span>).ToList&lt;XElement&gt;();           \r\n            <span style=\"color: blue;\">var</span> unitTestResults = doc.Descendants(ns + <span style=\"color: #a31515;\">\"UnitTestResult\"</span>).ToList&lt;XElement&gt;();\r\n            <span style=\"color: blue;\">var</span> result = <span style=\"color: blue;\">from</span> u <span style=\"color: blue;\">in</span> unitTests\r\n                         <span style=\"color: blue;\">let</span> id = u.Element(ns + <span style=\"color: #a31515;\">\"Execution\"</span>).Attribute(<span style=\"color: #a31515;\">\"id\"</span>).Value\r\n                         <span style=\"color: blue;\">let</span> desc = GetSafeValue(u, ns + <span style=\"color: #a31515;\">\"Description\"</span>)\r\n                         <span style=\"color: blue;\">let</span> testClass = GetSafeAttrValue(u, ns + <span style=\"color: #a31515;\">\"TestMethod\"</span>, <span style=\"color: #a31515;\">\"className\"</span>)\r\n                         <span style=\"color: blue;\">join</span> r <span style=\"color: blue;\">in</span> unitTestResults\r\n                         <span style=\"color: blue;\">on</span> id <span style=\"color: blue;\">equals</span> r.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value\r\n                         <span style=\"color: blue;\">orderby</span> testClass\r\n                         <span style=\"color: blue;\">select</span> <span style=\"color: blue;\">new</span> TestMethodRun\r\n                         {\r\n                             TestClass = testClass,\r\n                             TestMethodName = u.Attribute(<span style=\"color: #a31515;\">\"name\"</span>).Value,\r\n                             Description = desc,\r\n                             Status = r.Attribute(<span style=\"color: #a31515;\">\"outcome\"</span>).Value,\r\n                             Duration = ParseDuration(r,<span style=\"color: #a31515;\">\"duration\"</span>),\r\n                             ErrorInfo = ParseErrorInfo(r),\r\n                             ComputerName = r.Attribute(<span style=\"color: #a31515;\">\"computerName\"</span>).Value\r\n                         };\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">ï»¿</div>\r\n<p>with the following which has an extra join to test entries&nbsp;to enable the linking of Tests to results where ExecutionID is not held in the unitTest element which is where the problem lies if there is an ordered test.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            <span style=\"color: blue;\">string</span> name = doc.Document.Root.Attribute(<span style=\"color: #a31515;\">\"name\"</span>).Value;\r\n            <span style=\"color: blue;\">string</span> runUser = doc.Document.Root.Attribute(<span style=\"color: #a31515;\">\"runUser\"</span>).Value;\r\n            <span style=\"color: blue;\">var</span> orderedTests = doc.Descendants(ns + <span style=\"color: #a31515;\">\"OrderedTest\"</span>).ToList&lt;XElement&gt;();\r\n            <span style=\"color: blue;\">var</span> testEntries = doc.Descendants(ns + <span style=\"color: #a31515;\">\"TestEntry\"</span>).ToList&lt;XElement&gt;();\r\n            <span style=\"color: blue;\">var</span> unitTests = doc.Descendants(ns + <span style=\"color: #a31515;\">\"UnitTest\"</span>).ToList&lt;XElement&gt;();           \r\n            <span style=\"color: blue;\">var</span> unitTestResults = doc.Descendants(ns + <span style=\"color: #a31515;\">\"UnitTestResult\"</span>).ToList&lt;XElement&gt;();\r\n            <span style=\"color: blue;\">var</span> testResultAggregation = doc.Descendants(ns + <span style=\"color: #a31515;\">\"TestResultAggregation\"</span>).ToList&lt;XElement&gt;();\r\n            <span style=\"color: blue;\">var</span> result = <span style=\"color: blue;\">from</span> u <span style=\"color: blue;\">in</span> unitTests\r\n                         <span style=\"color: blue;\">join</span> testEntry <span style=\"color: blue;\">in</span> testEntries\r\n                         <span style=\"color: blue;\">on</span> u.Attribute(<span style=\"color: #a31515;\">\"id\"</span>).Value <span style=\"color: blue;\">equals</span> testEntry.Attribute(<span style=\"color: #a31515;\">\"testId\"</span>).Value\r\n                         <span style=\"color: blue;\">join</span> r <span style=\"color: blue;\">in</span> unitTestResults\r\n                         <span style=\"color: blue;\">on</span> testEntry.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value <span style=\"color: blue;\">equals</span> r.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value\r\n                         <span style=\"color: blue;\">orderby</span> GetSafeAttrValue(u, ns + <span style=\"color: #a31515;\">\"TestMethod\"</span>, <span style=\"color: #a31515;\">\"className\"</span>)\r\n                         <span style=\"color: blue;\">select</span> <span style=\"color: blue;\">new</span> TestMethodRun\r\n                         {\r\n                             TestClass = GetSafeAttrValue(u, ns + <span style=\"color: #a31515;\">\"TestMethod\"</span>, <span style=\"color: #a31515;\">\"className\"</span>),\r\n                             TestMethodName = u.Attribute(<span style=\"color: #a31515;\">\"name\"</span>).Value,\r\n                             Description = GetSafeValue(u, ns + <span style=\"color: #a31515;\">\"Description\"</span>),\r\n                             Status = r.Attribute(<span style=\"color: #a31515;\">\"outcome\"</span>).Value,\r\n                             Duration = ParseDuration(r, <span style=\"color: #a31515;\">\"duration\"</span>),\r\n                             ErrorInfo = ParseErrorInfo(r),\r\n                             ComputerName = r.Attribute(<span style=\"color: #a31515;\">\"computerName\"</span>).Value,\r\n                             Categories = GetCategories(u.Element(ns + <span style=\"color: #a31515;\">\"TestCategory\"</span>)),\r\n                             ParentTestName = GetParentTestName(orderedTests, testEntries, testResultAggregation, GetSafeAttrValue(r, <span style=\"color: #a31515;\">\"parentExecutionId\"</span>))\r\n                         };\r\n</pre>\r\n</div>\r\n<p>In addition to this I added added another property to TestMethodRun of ParentTestName of type string and added another method to TrxParser class of the below which allows me customise the HTML&nbsp;writer to output results by Ordered test as well as by class</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">string</span> GetParentTestName(List&lt;XElement&gt; OrderedTest, List&lt;XElement&gt; testEntries, List&lt;XElement&gt; testResultAggregation, <span style=\"color: blue;\">string</span> ParentExecID)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (ParentExecID != <span style=\"color: #a31515;\">\"\"</span>)\r\n            {\r\n                <span style=\"color: blue;\">var</span> parentName = <span style=\"color: blue;\">from</span> u <span style=\"color: blue;\">in</span> OrderedTest\r\n                                 <span style=\"color: blue;\">join</span> testEntry <span style=\"color: blue;\">in</span> testEntries\r\n                                 <span style=\"color: blue;\">on</span> u.Attribute(<span style=\"color: #a31515;\">\"id\"</span>).Value <span style=\"color: blue;\">equals</span> testEntry.Attribute(<span style=\"color: #a31515;\">\"testId\"</span>).Value\r\n                                 <span style=\"color: blue;\">join</span> r <span style=\"color: blue;\">in</span> testResultAggregation\r\n                                 <span style=\"color: blue;\">on</span> testEntry.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value <span style=\"color: blue;\">equals</span> r.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value\r\n                                 <span style=\"color: blue;\">where</span> r.Attribute(<span style=\"color: #a31515;\">\"executionId\"</span>).Value == ParentExecID\r\n                                 <span style=\"color: blue;\">select</span> u.Attribute(<span style=\"color: #a31515;\">\"name\"</span>).Value;\r\n                <span style=\"color: blue;\">return</span> parentName.First();\r\n            }\r\n            <span style=\"color: blue;\">return</span> String.Empty;\r\n        }\r\n</pre>\r\n</div>\r\n<p>Its a quick hack but its working for me but hopefully its a starting point for you.</p>",
    "PostedDate": "2012-03-19T03:14:04.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "812393",
    "ThreadId": "272480",
    "Html": "<p>I missed an extra method i had added which enabled me to categorise my tests and output in the html results. This was done by adding Categories property to TestMethodRun and then adding the method below to the TrxParser.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">string</span> GetCategories(XElement xElement)\r\n        {\r\n            <span style=\"color: blue;\">var</span> categoryElements = xElement.Descendants(ns + <span style=\"color: #a31515;\">\"TestCategoryItem\"</span>).ToList&lt;XElement&gt;(); \r\n            StringBuilder sb = <span style=\"color: blue;\">new</span> StringBuilder();\r\n            <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int</span> i=0;i&lt;categoryElements.Count;i++)\r\n            {\r\n                sb.Append(categoryElements[i].Attribute(<span style=\"color: #a31515;\">\"TestCategory\"</span>).Value);\r\n                <span style=\"color: blue;\">if</span> (i != categoryElements.Count - 1)\r\n                {\r\n                    sb.Append(<span style=\"color: #a31515;\">\",\"</span>);\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">return</span> sb.ToString();\r\n        }\r\n</pre>\r\n</div>",
    "PostedDate": "2012-03-19T03:24:43.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]